#!/bin/sh

. /etc/repoctl.conf

function isingroup()
{
    local grp="$1"
    for group in `groups`
    do if [ "$grp" = "$group" ]
    then 
	return 0
    fi
    done
    return 1
}

function inlist()
{
    local k="$1"
    local list="$2"
    for e in $list
    do
	if [ a"$k" = a"$e" ]
	then
	    return 0
	fi
    done
    return 1
}

function get_media_path()
{
    local distrorelease="$1"; shift
    local section="$1"; shift
    local sectionrepo="$1"; shift
    local arch="$1"; shift
    echo "$distribdir/$distrorelease/$arch/media/$section/$sectionrepo"
}

function get_media_path_debug()
{
    local distrorelease="$1"; shift
    local section="$1"; shift
    local sectionrepo="$1"; shift
    local arch="$1"; shift
    echo "$distribdir/$distrorelease/$arch/media/debug/$section/$sectionrepo"
}

function get_media_path_src()
{
    local distrorelease="$1"; shift
    local section="$1"; shift
    local sectionrepo="$1"; shift
    echo "$distribdir/$distrorelease/SRPMS/$section/$sectionrepo"
}

function update_hdlist()
{
    local repository="$1"
    local fdeps="$repository/../../media_info/file-deps"
    test -f "$fdeps" && ofdeps="--file-deps $fdeps"
    $dryrun /usr/bin/genhdlist2 -v --versioned --allow-empty-media $ofdeps "$repository"
}

function update_hdlists()
{
    local distrorelease="$1"
    local section="$2"
    local sectionrepo="$3"

    check_distro_section "$distrorelease" "$section" "$sectionrepo"
    for arch in $arches
    do
	update_hdlist "$distribdir/$distrorelease/$arch/media/$section/$sectionrepo"
	update_hdlist "$distribdir/$distrorelease/$arch/media/debug/$section/$sectionrepo"
    done
    update_hdlist "$distribdir/$distrorelease/SRPMS/$section/$sectionrepo"
    update_common_MD5SUM $distrorelease
}

function get_lock()
{
    local lockdir="$1"
    local waitdir="$lockdir/wait.$$"

    if mkdir "$lockdir"
    then
	return
    else
	if ! mkdir "$waitdir"
	then
	    get_lock "$lockdir"
	    return
	fi
	inotifywait -e delete_self "$waitdir"
    fi
}

function rm_lock()
{
    local lockdir="$1"
    if rmdir "$lockdir"
    then
	return
    fi
    local l=$(ls -tr "$lockdir" | head -1)
    rmdir "$lockdir/$l"
}

function get_repo_lock()
{
    local distrorelease="$1"
    local section="$2"
    local sectionrepo="$3"
    repolock="$lockdir/$distrorelease-$section-$sectionrepo.lock"
    get_lock "$repolock"
}

function rm_repo_lock()
{
    local distrorelease="$1"
    local section="$2"
    local sectionrepo="$3"
    repolock="$lockdir/$distrorelease-$section-$sectionrepo.lock"
    rm_lock "$repolock"
}

function get_distro_lock()
{
    local distrorelease="$1"
    local distrolock="$lockdir/$distrorelease"
    get_lock "$distrolock"
    for distrosection in $distrosections
    do
	for sectionrepo in $sectionsrepos
	do
	    get_repo_lock $distrorelease $distrosection $sectionrepo
	done
    done
}

function rm_distro_lock()
{
    local distrorelease="$1"
    local distrolock="$lockdir/$distrorelease"
    for distrosection in $distrosections
    do
	for sectionrepo in $sectionsrepos
	do
	    rm_repo_lock $distrorelease $distrosection $sectionrepo
	done
    done
    rm_lock "$distrolock"
}

function update_common_MD5SUM()
{
    local distrorelease="$1"
    for arch in $arches
    do
	pushd "$distribdir/$distrorelease/$arch/media/media_info"
	if [ -z "$dryrun" ]
	then
	    /usr/bin/md5sum hdlist_* synthesis.* > MD5SUM
	fi
	popd
    done
}

function mirror_repository()
{
    local distrorelease="$1"
    $dryrun /usr/bin/rsync $mirror_rsync_options "$distribdir/$distrorelease/" "$finaldistribdir/$distrorelease/"
}

function check_distro_section()
{
    local distrorelease="$1"
    local section="$2"
    local sectionrepo="$3"

    if ! inlist "$distrorelease" "$distroreleases"
    then
	echo "Incorrect distrorelease $distrorelease" >&2
	exit 1
    fi

    if ! inlist "$section" "$distrosections"
    then
	echo "Incorrect section $section" >&2
	exit 1
    fi

    if ! inlist "$sectionrepo" "$sectionsrepos"
    then
	echo "Incorrect repository $sectionrepo" >&2
	exit 1
    fi
}

# This function can be used to move/remove/link a package file
# To remove the file, set dst_* variables to ""
# To link the file, set src_* variables to ""
function move_pkg_file()
{
    local src_distrorelease="$1"; shift
    local src_section="$1"; shift
    local src_sectionrepo="$1"; shift

    local dst_distrorelease="$1"; shift
    local dst_section="$1"; shift
    local dst_sectionrepo="$1"; shift

    local srcfile="$1"; shift
    local destdir="$1"; shift
    local output="$1"; shift

    if [ -n "$dst_distrorelease$dst_section$dst_sectionrepo" ]
    then
	local bn=$(basename "$srcfile")
	get_repo_lock "$dst_distrorelease" "$dst_section" "$dst_sectionrepo"
	$dryrun ln -v "$srcfile" "$destdir/$bn" >> "$output"
	rm_repo_lock "$dst_distrorelease" "$dst_section" "$dst_sectionrepo"
    fi
    if [ -n "$src_distrorelease$src_section$src_sectionrepo" ]
    then
	get_repo_lock "$src_distrorelease" "$src_section" "$src_sectionrepo"
	$dryrun rm -f -v "$srcfile" >> "$output"
	rm_repo_lock "$src_distrorelease" "$src_section" "$src_sectionrepo"
    fi
    if [ -z "$dst_distrorelease$dst_section$dst_sectionrepo$src_distrorelease$src_section$src_sectionrepo" ]
    then
        echo "$srcfile" >> "output"
    fi
}

# This function can be used to move/remove/link package files
# To remove the files, set dst_* variables to ""
# To link the files, set src_* variables to ""
function move_pkg_files()
{
    local src_distrorelease="$1"; shift
    local src_section="$1"; shift
    local src_sectionrepo="$1"; shift

    local dst_distrorelease="$1"; shift
    local dst_section="$1"; shift
    local dst_sectionrepo="$1"; shift

    local srcdir="$1"; shift
    local destdir="$1"; shift
    local srcpkg="$1"; shift
    local output="$1"; shift

    for file in "$srcdir/"*.rpm
    do
        local fname=$(rpm -qp --qf '%{SOURCERPM}' "$file")
        if [ a"$fname" = a"$srcpkg" ]
        then
	    move_pkg_file \
		"$src_distrorelease" "$src_section" "$src_sectionrepo" \
		"$dst_distrorelease" "$dst_section" "$dst_sectionrepo" \
		"$file" "$destdir" "$output"
        fi
    done
}

function find_src_pkg()
{
    local distrorelease="$1"
    local section="$2"
    local sectionrepo="$3"
    local pkgname="$4"

    check_distro_section "$distrorelease" "$section" "$sectionrepo"
    srcdir=$(get_media_path_src "$distrorelease" "$section" "$sectionrepo")
    for file in "$srcdir/"*.rpm
    do
	local fname=$(rpm -qp --qf '%{NAME}' "$file")
	if [ a"$fname" = a"$pkgname" ]
	then
	    basename "$file"
	    return 0
	fi
    done
}

# This function can be used to move or remove a package
# To remove a package, set dst_* variables to ""
function move_pkg()
{
    local src_distrorelease="$1"
    local src_section="$2"
    local src_sectionrepo="$3"
    local dst_distrorelease="$4"
    local dst_section="$5"
    local dst_sectionrepo="$6"
    local srcname="$7"
    local output="$8"

    check_distro_section "$src_distrorelease" "$src_section" "$src_sectionrepo"
    [ -z "$dst_distrorelease$dst_section$dst_sectionrepo" ] \
	|| check_distro_section "$dst_distrorelease" "$dst_section" "$dst_sectionrepo"

    local srcpkg=$(find_src_pkg "$src_distrorelease" "$src_section" "$src_sectionrepo" "$srcname")

    if [ -z $srcpkg ]
    then
	echo "The package $srcname could not be found in $src_distrorelease/$src_section/$src_sectionrepo repository." >&2
	exit 2
    fi

    for arch in $arches
    do
	move_pkg_files \
	    "$src_distrorelease" "$src_section" "$src_sectionrepo" \
	    "$dst_distrorelease" "$dst_section" "$dst_sectionrepo" \
	    $(get_media_path "$src_distrorelease" "$src_section" "$src_sectionrepo" "$arch") \
	    $(get_media_path "$dst_distrorelease" "$dst_section" "$dst_sectionrepo" "$arch") \
	    "$srcpkg" "$output"
	move_pkg_files \
	    "$src_distrorelease" "$src_section" "$src_sectionrepo" \
	    "$dst_distrorelease" "$dst_section" "$dst_sectionrepo" \
	    $(get_media_path_debug "$src_distrorelease" "$src_section" "$src_sectionrepo" "$arch") \
	    $(get_media_path_debug "$dst_distrorelease" "$dst_section" "$dst_sectionrepo" "$arch") \
	    "$srcpkg" "$output"
    done
    move_pkg_file \
	"$src_distrorelease" "$src_section" "$src_sectionrepo" \
	"$dst_distrorelease" "$dst_section" "$dst_sectionrepo" \
	$(get_media_path_src "$src_distrorelease" "$src_section" "$src_sectionrepo")/"$srcpkg" \
	$(get_media_path_src "$dst_distrorelease" "$dst_section" "$dst_sectionrepo") \
	"$output"
}

